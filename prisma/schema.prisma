// Prisma schema for Fratelli Bruno web platform
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum BlogCategory {
  TOURISM
  HOSPITALITY
  RESTAURANT
  REAL_ESTATE
  CONSTRUCTION
  CONSULTING
  NEWS
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  posts         BlogPost[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  excerpt       String?
  content       String       @db.Text
  category      BlogCategory @default(NEWS)
  status        BlogStatus   @default(DRAFT)
  coverImageUrl String?
  coverImageKey String?
  publishedAt   DateTime?
  authorId      String
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
